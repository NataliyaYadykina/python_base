from datetime import datetime
from telegram import Bot, Update
from telegram.ext import Updater, CommandHandler, ConversationHandler, MessageHandler, Filters, CallbackContext

TOKEN = 'token'

bot = Bot(token=TOKEN)
updater = Updater(token=TOKEN)
dispatcher = updater.dispatcher

def start(update:Update, context:CallbackContext):
    context.bot.send_message(update.effective_chat.id, f'''–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! ‚úåÔ∏è

üë®‚Äçüéì –Ø –±–æ—Ç-–º–∞—Ç–µ–º–∞—Ç–∏–∫ –∏ –º–æ–≥—É —Ä–µ—à–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Å —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏.

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:

üßÆ –†–µ—à–∏—Ç—å –ø—Ä–∏–º–µ—Ä - /do
üìù –°–º–æ—Ç—Ä–µ—Ç—å –∂—É—Ä–Ω–∞–ª - /history
üìö –ß–∏—Ç–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É - /faq''')

def history(update:Update, context:CallbackContext):
    history = view_history(update.effective_user.id, 'hw10_tg_bot_math_log.csv')
    context.bot.send_message(update.effective_chat.id, history)
    context.bot.send_message(update.effective_chat.id, '–†–µ—à–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã - /do\n–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - /start')

def faq(update:Update, context:CallbackContext):
    context.bot.send_message(update.effective_chat.id, '''–°–ü–†–ê–í–ö–ê

- –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏
- –±–æ—Ç –Ω–µ —É–º–µ–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–∫–æ–±–∫–∏
- –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ –ø—Ä–∏–º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É —á–∏—Å–ª–∞–º–∏ –∏ –∑–Ω–∞–∫–∞–º–∏-–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
- –µ—Å–ª–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, —á–∏—Å–ª–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ, —Ç–æ –º–µ–∂–¥—É —á–∏—Å–ª–æ–º –∏ –µ–≥–æ –∑–Ω–∞–∫–æ–º "–º–∏–Ω—É—Å" –ø—Ä–æ–±–µ–ª —Å—Ç–∞–≤–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ. –ò–Ω–∞—á–µ –±–æ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏–º–µ—Ä –Ω–µ–≤–µ—Ä–Ω–æ.

–†–µ—à–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã - /do
–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - /start''')

def do_start(update:Update, context:CallbackContext):
    context.bot.send_message(update.effective_chat.id, '''–ü—Ä–∏—à–ª–∏ –≤ —á–∞—Ç –ø—Ä–∏–º–µ—Ä, —Ä–∞–∑–¥–µ–ª—è—è —á–∏—Å–ª–∞ –∏ –∑–Ω–∞–∫–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏.\n–ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —Å–∫–æ–±–∫–∏.
–ï—Å–ª–∏ —á–∏—Å–ª–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ, –Ω–µ —Å—Ç–∞–≤—å –ø—Ä–æ–±–µ–ª –º–µ–∂–¥—É —á–∏—Å–ª–æ–º –∏ –µ–≥–æ –∑–Ω–∞–∫–æ–º "–º–∏–Ω—É—Å".''')

def do(update:Update, context:CallbackContext):
    example = update.message.text
    example_lst = example.split()
    result = procces(example_lst)
    context.bot.send_message(update.effective_chat.id, f'{example} = {round(float(result[0]), 2)}')
    log(update.effective_user.id, example, round(result[0], 2), 'hw10_tg_bot_math_log.csv')

def cancel(update:Update, context:CallbackContext):
    context.bot.send_message(update.effective_chat.id, '‚ùóÔ∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.')

def procces(lst):
    while '/' in lst:
        ind = lst.index('/')
        res = float(lst[ind - 1]) / float(lst[ind + 1])
        del lst[(ind - 1) : (ind + 2)]
        lst.insert(ind - 1, res)

    while '*' in lst:
        ind = lst.index('*')
        res = float(lst[ind - 1]) * float(lst[ind + 1])
        del lst[(ind - 1) : (ind + 2)]
        lst.insert(ind - 1, res)

    while '-' in lst:
        ind = lst.index('-')
        res = float(lst[ind - 1]) - float(lst[ind + 1])
        del lst[(ind - 1) : (ind + 2)]
        lst.insert(ind - 1, res)

    while '+' in lst:
        ind = lst.index('+')
        res = float(lst[ind - 1]) + float(lst[ind + 1])
        del lst[(ind - 1) : (ind + 2)]
        lst.insert(ind - 1, res)
    
    return lst

def log(user, example, result, file_path):
    time = datetime.now()
    with open(file_path, 'a', encoding = 'utf-8') as f:
        f.write(f'{time}; {user}; {example}; {result}\n')
    return

def view_history(user, file_path):
    user_history = []
    str_history = ''
    with open (file_path, 'r', encoding = 'utf-8') as f:
        for line in f:
            if str(user) in line:
                user_history.append(line)
    if user_history:
        for i in range(len(user_history)):
            user_history[i] = user_history[i].split(';')
            str_history += user_history[i][2][1:] + ' =' + user_history[i][3]
        str_history += '\n'
    return str_history

start_handler = CommandHandler('start', start)
history_handler = CommandHandler('history', history)
faq_handler = CommandHandler('faq', faq)
do_start_handler = CommandHandler('do', do_start)
do_handler = MessageHandler(Filters.text, do)

cancel_handler = CommandHandler('cancel', cancel)

dispatcher.add_handler(start_handler)
dispatcher.add_handler(history_handler)
dispatcher.add_handler(faq_handler)
dispatcher.add_handler(do_start_handler)
dispatcher.add_handler(do_handler)

updater.start_polling() # start
updater.idle() # end
